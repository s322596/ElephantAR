import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "snapchat.snapdoc";
function createBaseSnapDocMessageOptions() {
    return { componentTypeId: undefined, componentTypeName: undefined, shouldEncrypt: false };
}
export const SnapDocMessageOptions = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.componentTypeId !== undefined) {
            writer.uint32(8).int32(message.componentTypeId);
        }
        if (message.componentTypeName !== undefined) {
            writer.uint32(18).string(message.componentTypeName);
        }
        if (message.shouldEncrypt === true) {
            writer.uint32(24).bool(message.shouldEncrypt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnapDocMessageOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.componentTypeId = reader.int32();
                    break;
                case 2:
                    message.componentTypeName = reader.string();
                    break;
                case 3:
                    message.shouldEncrypt = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSnapDocMessageOptions();
        message.componentTypeId = (_a = object.componentTypeId) !== null && _a !== void 0 ? _a : undefined;
        message.componentTypeName = (_b = object.componentTypeName) !== null && _b !== void 0 ? _b : undefined;
        message.shouldEncrypt = (_c = object.shouldEncrypt) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=extensions.js.map