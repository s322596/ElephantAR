import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "snapchat.cdp.cof";
export var CameraDirection;
(function (CameraDirection) {
    CameraDirection[CameraDirection["UNKNOWN_CAMERA_DIRECTION"] = 0] = "UNKNOWN_CAMERA_DIRECTION";
    CameraDirection[CameraDirection["FRONT"] = 1] = "FRONT";
    CameraDirection[CameraDirection["BACK"] = 2] = "BACK";
    CameraDirection[CameraDirection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraDirection || (CameraDirection = {}));
export var CameraContext;
(function (CameraContext) {
    CameraContext[CameraContext["UNKNOWN_CAMERA_CONTEXT"] = 0] = "UNKNOWN_CAMERA_CONTEXT";
    CameraContext[CameraContext["MAIN"] = 1] = "MAIN";
    CameraContext[CameraContext["REPLY"] = 2] = "REPLY";
    CameraContext[CameraContext["PROFILE"] = 3] = "PROFILE";
    CameraContext[CameraContext["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraContext || (CameraContext = {}));
export var CameraApi;
(function (CameraApi) {
    CameraApi[CameraApi["UNKNOWN_CAMERA_API"] = 0] = "UNKNOWN_CAMERA_API";
    CameraApi[CameraApi["CAMERA_1"] = 1] = "CAMERA_1";
    CameraApi[CameraApi["CAMERA_2"] = 2] = "CAMERA_2";
    CameraApi[CameraApi["ARCORE"] = 3] = "ARCORE";
    CameraApi[CameraApi["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraApi || (CameraApi = {}));
export var FlashState;
(function (FlashState) {
    FlashState[FlashState["UNKNOWN_FLASH_STATE"] = 0] = "UNKNOWN_FLASH_STATE";
    FlashState[FlashState["FLASH_ON"] = 1] = "FLASH_ON";
    FlashState[FlashState["FLASH_OFF"] = 2] = "FLASH_OFF";
    FlashState[FlashState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FlashState || (FlashState = {}));
export var NightModeState;
(function (NightModeState) {
    NightModeState[NightModeState["UNKNOWN_NIGHT_MODE_STATE"] = 0] = "UNKNOWN_NIGHT_MODE_STATE";
    NightModeState[NightModeState["NIGHT_MODE_ON"] = 1] = "NIGHT_MODE_ON";
    NightModeState[NightModeState["NIGHT_MODE_OFF"] = 2] = "NIGHT_MODE_OFF";
    NightModeState[NightModeState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NightModeState || (NightModeState = {}));
export var PictureMode;
(function (PictureMode) {
    PictureMode[PictureMode["UNKNOWN_PICTURE_MODE"] = 0] = "UNKNOWN_PICTURE_MODE";
    PictureMode[PictureMode["JPEG_PICTURE_MODE"] = 1] = "JPEG_PICTURE_MODE";
    PictureMode[PictureMode["GPU_PICTURE_MODE"] = 2] = "GPU_PICTURE_MODE";
    PictureMode[PictureMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PictureMode || (PictureMode = {}));
export var CaptureMode;
(function (CaptureMode) {
    CaptureMode[CaptureMode["UNKNOWN_CAPTURE_MODE"] = 0] = "UNKNOWN_CAPTURE_MODE";
    CaptureMode[CaptureMode["DEFAULT_CAPTURE_MODE"] = 1] = "DEFAULT_CAPTURE_MODE";
    CaptureMode[CaptureMode["TIMELINE_CAPTURE_MODE"] = 2] = "TIMELINE_CAPTURE_MODE";
    CaptureMode[CaptureMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CaptureMode || (CaptureMode = {}));
export var Camera2Level;
(function (Camera2Level) {
    Camera2Level[Camera2Level["UNKNOWN_CAMERA2_LEVEL"] = 0] = "UNKNOWN_CAMERA2_LEVEL";
    Camera2Level[Camera2Level["LEGACY"] = 1] = "LEGACY";
    Camera2Level[Camera2Level["LIMITED"] = 2] = "LIMITED";
    Camera2Level[Camera2Level["FULL"] = 3] = "FULL";
    Camera2Level[Camera2Level["LEVEL_3"] = 4] = "LEVEL_3";
    Camera2Level[Camera2Level["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Camera2Level || (Camera2Level = {}));
function createBaseCameraSignals() {
    return {
        cameraDirection: 0,
        cameraContext: 0,
        cameraApi: 0,
        flashState: 0,
        camera2Level: 0,
        nightModeState: 0,
        isFirstCapture: false,
        pictureMode: 0,
        captureMode: 0,
        hasLens: false,
        isLowLight: false,
        isConcurrentCameraSupported: false,
    };
}
export const CameraSignals = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.cameraDirection !== 0) {
            writer.uint32(8).int32(message.cameraDirection);
        }
        if (message.cameraContext !== 0) {
            writer.uint32(16).int32(message.cameraContext);
        }
        if (message.cameraApi !== 0) {
            writer.uint32(24).int32(message.cameraApi);
        }
        if (message.flashState !== 0) {
            writer.uint32(32).int32(message.flashState);
        }
        if (message.camera2Level !== 0) {
            writer.uint32(40).int32(message.camera2Level);
        }
        if (message.nightModeState !== 0) {
            writer.uint32(48).int32(message.nightModeState);
        }
        if (message.isFirstCapture === true) {
            writer.uint32(56).bool(message.isFirstCapture);
        }
        if (message.pictureMode !== 0) {
            writer.uint32(64).int32(message.pictureMode);
        }
        if (message.captureMode !== 0) {
            writer.uint32(72).int32(message.captureMode);
        }
        if (message.hasLens === true) {
            writer.uint32(80).bool(message.hasLens);
        }
        if (message.isLowLight === true) {
            writer.uint32(88).bool(message.isLowLight);
        }
        if (message.isConcurrentCameraSupported === true) {
            writer.uint32(96).bool(message.isConcurrentCameraSupported);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCameraSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cameraDirection = reader.int32();
                    break;
                case 2:
                    message.cameraContext = reader.int32();
                    break;
                case 3:
                    message.cameraApi = reader.int32();
                    break;
                case 4:
                    message.flashState = reader.int32();
                    break;
                case 5:
                    message.camera2Level = reader.int32();
                    break;
                case 6:
                    message.nightModeState = reader.int32();
                    break;
                case 7:
                    message.isFirstCapture = reader.bool();
                    break;
                case 8:
                    message.pictureMode = reader.int32();
                    break;
                case 9:
                    message.captureMode = reader.int32();
                    break;
                case 10:
                    message.hasLens = reader.bool();
                    break;
                case 11:
                    message.isLowLight = reader.bool();
                    break;
                case 12:
                    message.isConcurrentCameraSupported = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseCameraSignals();
        message.cameraDirection = (_a = object.cameraDirection) !== null && _a !== void 0 ? _a : 0;
        message.cameraContext = (_b = object.cameraContext) !== null && _b !== void 0 ? _b : 0;
        message.cameraApi = (_c = object.cameraApi) !== null && _c !== void 0 ? _c : 0;
        message.flashState = (_d = object.flashState) !== null && _d !== void 0 ? _d : 0;
        message.camera2Level = (_e = object.camera2Level) !== null && _e !== void 0 ? _e : 0;
        message.nightModeState = (_f = object.nightModeState) !== null && _f !== void 0 ? _f : 0;
        message.isFirstCapture = (_g = object.isFirstCapture) !== null && _g !== void 0 ? _g : false;
        message.pictureMode = (_h = object.pictureMode) !== null && _h !== void 0 ? _h : 0;
        message.captureMode = (_j = object.captureMode) !== null && _j !== void 0 ? _j : 0;
        message.hasLens = (_k = object.hasLens) !== null && _k !== void 0 ? _k : false;
        message.isLowLight = (_l = object.isLowLight) !== null && _l !== void 0 ? _l : false;
        message.isConcurrentCameraSupported = (_m = object.isConcurrentCameraSupported) !== null && _m !== void 0 ? _m : false;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=camera_provided_signals.js.map