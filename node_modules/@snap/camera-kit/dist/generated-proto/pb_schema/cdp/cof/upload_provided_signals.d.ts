import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "snapchat.cdp.cof";
export declare enum ChunkUploadPreference {
    PREFERENCE_UNSET = 0,
    GCS = 1,
    S3 = 2,
    AUTO = 3,
    UNRECOGNIZED = -1
}
export interface UploadSignals {
    chunkUploadSupportRequired: boolean;
    cloudfrontPop: string;
    gcdnPop: string;
    chunkUploadPreference: ChunkUploadPreference;
}
export declare const UploadSignals: {
    encode(message: UploadSignals, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UploadSignals;
    fromPartial<I extends {
        chunkUploadSupportRequired?: boolean | undefined;
        cloudfrontPop?: string | undefined;
        gcdnPop?: string | undefined;
        chunkUploadPreference?: ChunkUploadPreference | undefined;
    } & {
        chunkUploadSupportRequired?: boolean | undefined;
        cloudfrontPop?: string | undefined;
        gcdnPop?: string | undefined;
        chunkUploadPreference?: ChunkUploadPreference | undefined;
    } & Record<Exclude<keyof I, keyof UploadSignals>, never>>(object: I): UploadSignals;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=upload_provided_signals.d.ts.map