import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "snapchat.cdp.cof";
function createBaseLensesSignals() {
    return { lastLensActivatedTime: "0", lastSnappableLensActivatedTime: "0", isAnyEffectApplied: false };
}
export const LensesSignals = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.lastLensActivatedTime !== "0") {
            writer.uint32(8).uint64(message.lastLensActivatedTime);
        }
        if (message.lastSnappableLensActivatedTime !== "0") {
            writer.uint32(16).uint64(message.lastSnappableLensActivatedTime);
        }
        if (message.isAnyEffectApplied === true) {
            writer.uint32(24).bool(message.isAnyEffectApplied);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensesSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lastLensActivatedTime = longToString(reader.uint64());
                    break;
                case 2:
                    message.lastSnappableLensActivatedTime = longToString(reader.uint64());
                    break;
                case 3:
                    message.isAnyEffectApplied = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseLensesSignals();
        message.lastLensActivatedTime = (_a = object.lastLensActivatedTime) !== null && _a !== void 0 ? _a : "0";
        message.lastSnappableLensActivatedTime = (_b = object.lastSnappableLensActivatedTime) !== null && _b !== void 0 ? _b : "0";
        message.isAnyEffectApplied = (_c = object.isAnyEffectApplied) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=lenses_provided_signals.js.map