import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "snapchat.cdp.cof";
export interface OperaSignals {
    contentViewSource: number;
    playbackItemType: number;
    useVerticalNavigation: boolean;
}
export declare const OperaSignals: {
    encode(message: OperaSignals, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OperaSignals;
    fromPartial<I extends {
        contentViewSource?: number | undefined;
        playbackItemType?: number | undefined;
        useVerticalNavigation?: boolean | undefined;
    } & {
        contentViewSource?: number | undefined;
        playbackItemType?: number | undefined;
        useVerticalNavigation?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof OperaSignals>, never>>(object: I): OperaSignals;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=opera_provided_signals.d.ts.map