import _m0 from "protobufjs/minimal";
import { ConfigTargetingAppState } from "./config_request";
export declare const protobufPackage = "snapchat.cdp.cof";
export interface BoltSignals {
    boltUseCase: number;
    boltCdnExperimentationId: number;
    boltIsContentPopular: boolean;
    boltClientAppState: ConfigTargetingAppState;
}
export declare const BoltSignals: {
    encode(message: BoltSignals, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BoltSignals;
    fromPartial<I extends {
        boltUseCase?: number | undefined;
        boltCdnExperimentationId?: number | undefined;
        boltIsContentPopular?: boolean | undefined;
        boltClientAppState?: ConfigTargetingAppState | undefined;
    } & {
        boltUseCase?: number | undefined;
        boltCdnExperimentationId?: number | undefined;
        boltIsContentPopular?: boolean | undefined;
        boltClientAppState?: ConfigTargetingAppState | undefined;
    } & Record<Exclude<keyof I, keyof BoltSignals>, never>>(object: I): BoltSignals;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=bolt_provided_signals.d.ts.map